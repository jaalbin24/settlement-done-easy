# ==================================================================================== #
#                                                                                      #
# This file was automatically generated by a custom-written library.                   #
# Instead of editing this file, edit the generator file then run the following command #
#                                                                                      #
# rails generate_specs:system                                                          #
#                                                                                      #
# ==================================================================================== #

require 'rails_helper'

RSpec.describe "The whats next card in the settlements section of the user profile show page" do
    include_context 'devise'
    context "when the owner is an attorney" do
        before :context do
            @owner = create(:law_firm, num_members: 2).members.first
            another_law_firm = create(:law_firm)
            another_insurance_company = create(:insurance_company)
            another_adjuster = another_insurance_company.members.first
            another_attorney = another_law_firm.members.first
            organization = @owner.organization
            member_of_organization = organization.members.last
            @non_owner_users = [organization, member_of_organization, another_attorney, another_adjuster, another_law_firm, another_insurance_company]
        end
        after :context do
            User.all.each {|u| u.destroy}
        end
        context "with 0 settlements needing a document" do
            before :context do
                @needs_document = create_list(:settlement, 0, :needs_document, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @needs_document
            end
            after :context do
                @needs_document.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must not have the needs document message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='needs_document_message']"
                    expect(page).to_not have_text '0 settlements need a document'
                end
            end
        end
        context "with 1 settlement needing a document" do
            before :context do
                @needs_document = create_list(:settlement, 1, :needs_document, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @needs_document
            end
            after :context do
                @needs_document.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the needs document message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='needs_document_message']"
                    expect(page).to have_text 'A settlement needs a document'
                end
                context "after the needs document message is clicked" do
                    it "must hide all other whats next messages" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_message']").click
                        sleep 0.1 # To allow time for the whats next card to update
                        expect(page).to_not have_css "[data-test-id='whats_next_wait_list']"
                        expect(find("[data-test-id='whats_next_action_list']").all('form').count).to eq(1) # +1 because the table header counts as a row
                        expect(find("[data-test-id='whats_next_action_list']")).to have_text 'A settlement needs a document'
                    end
                    it "must show only the settlements needing a document in the active settlements card" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(all('tr').count).to eq(@needs_document.size + 1) # +1 because the table header counts as a row
                        @needs_document.each do |s|
                            expect(page).to have_text s.public_number
                        end
                    end
                    it "must show the reset button" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(page).to have_css "button[data-test-id='reset_settlement_search_button']"
                    end
                    context "and the reset button is clicked" do
                        it "must show all the owners settlements again" do
                            sign_in @visitor
                            visit user_profile_show_path(@owner.profile, section: 'settlements')
                            find("[data-test-id='needs_document_message']").click
                            sleep 0.1 # To allow time for the active settlement table to update
                            click_on 'Reset'
                            sleep 0.1 # To allow time for the active settlement table to update
                            expect(all('tr').count).to eq(@owner.settlements.count + 1) # +1 because the table header counts as a row
                            @owner.settlements.each_with_index do |s, i|
                                expect(page).to have_text s.public_number
                            end
                        end
                    end
                end
            end
        end
        context "with 2 settlements needing a document" do
            before :context do
                @needs_document = create_list(:settlement, 2, :needs_document, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @needs_document
            end
            after :context do
                @needs_document.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the needs document message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='needs_document_message']"
                    expect(page).to have_text '2 settlements need a document'
                end
                context "after the needs document message is clicked" do
                    it "must hide all other whats next messages" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_message']").click
                        sleep 0.1 # To allow time for the whats next card to update
                        expect(page).to_not have_css "[data-test-id='whats_next_wait_list']"
                        expect(find("[data-test-id='whats_next_action_list']").all('form').count).to eq(1) # +1 because the table header counts as a row
                        expect(find("[data-test-id='whats_next_action_list']")).to have_text '2 settlements need a document'
                    end
                    it "must show only the settlements needing a document in the active settlements card" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(all('tr').count).to eq(@needs_document.size + 1) # +1 because the table header counts as a row
                        @needs_document.each do |s|
                            expect(page).to have_text s.public_number
                        end
                    end
                    it "must show the reset button" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(page).to have_css "button[data-test-id='reset_settlement_search_button']"
                    end
                    context "and the reset button is clicked" do
                        it "must show all the owners settlements again" do
                            sign_in @visitor
                            visit user_profile_show_path(@owner.profile, section: 'settlements')
                            find("[data-test-id='needs_document_message']").click
                            sleep 0.1 # To allow time for the active settlement table to update
                            click_on 'Reset'
                            sleep 0.1 # To allow time for the active settlement table to update
                            expect(all('tr').count).to eq(@owner.settlements.count + 1) # +1 because the table header counts as a row
                            @owner.settlements.each_with_index do |s, i|
                                expect(page).to have_text s.public_number
                            end
                        end
                    end
                end
            end
        end
        context "with 0 settlements needing document approval" do
            before :context do
                @needs_document_approval_from_ = create_list(:settlement, 0, :needs_document_approval_from_attorney, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @needs_document_approval_from_
            end
            after :context do
                @needs_document_approval_from_.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must not have the needs document approval from  message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='needs_document_approval_from_message']"
                    expect(page).to_not have_text '0 documents need your approval'
                end
            end
        end
        context "with 1 settlement needing document approval" do
            before :context do
                @needs_document_approval_from_ = create_list(:settlement, 1, :needs_document_approval_from_attorney, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @needs_document_approval_from_
            end
            after :context do
                @needs_document_approval_from_.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the needs document approval from  message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='needs_document_approval_from_message']"
                    expect(page).to have_text 'A document needs your approval'
                end
                context "after the needs document approval from  message is clicked" do
                    it "must hide all other whats next messages" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_approval_from_message']").click
                        sleep 0.1 # To allow time for the whats next card to update
                        expect(page).to_not have_css "[data-test-id='whats_next_wait_list']"
                        expect(find("[data-test-id='whats_next_action_list']").all('form').count).to eq(1) # +1 because the table header counts as a row
                        expect(find("[data-test-id='whats_next_action_list']")).to have_text 'A document needs your approval'
                    end
                    it "must show only the settlements needing document approval in the active settlements card" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_approval_from_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(all('tr').count).to eq(@needs_document_approval_from_.size + 1) # +1 because the table header counts as a row
                        @needs_document_approval_from_.each do |s|
                            expect(page).to have_text s.public_number
                        end
                    end
                    it "must show the reset button" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_approval_from_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(page).to have_css "button[data-test-id='reset_settlement_search_button']"
                    end
                    context "and the reset button is clicked" do
                        it "must show all the owners settlements again" do
                            sign_in @visitor
                            visit user_profile_show_path(@owner.profile, section: 'settlements')
                            find("[data-test-id='needs_document_approval_from_message']").click
                            sleep 0.1 # To allow time for the active settlement table to update
                            click_on 'Reset'
                            sleep 0.1 # To allow time for the active settlement table to update
                            expect(all('tr').count).to eq(@owner.settlements.count + 1) # +1 because the table header counts as a row
                            @owner.settlements.each_with_index do |s, i|
                                expect(page).to have_text s.public_number
                            end
                        end
                    end
                end
            end
        end
        context "with 2 settlements needing document approval" do
            before :context do
                @needs_document_approval_from_ = create_list(:settlement, 2, :needs_document_approval_from_attorney, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @needs_document_approval_from_
            end
            after :context do
                @needs_document_approval_from_.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the needs document approval from  message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='needs_document_approval_from_message']"
                    expect(page).to have_text '2 documents need your approval'
                end
                context "after the needs document approval from  message is clicked" do
                    it "must hide all other whats next messages" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_approval_from_message']").click
                        sleep 0.1 # To allow time for the whats next card to update
                        expect(page).to_not have_css "[data-test-id='whats_next_wait_list']"
                        expect(find("[data-test-id='whats_next_action_list']").all('form').count).to eq(1) # +1 because the table header counts as a row
                        expect(find("[data-test-id='whats_next_action_list']")).to have_text '2 documents need your approval'
                    end
                    it "must show only the settlements needing document approval in the active settlements card" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_approval_from_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(all('tr').count).to eq(@needs_document_approval_from_.size + 1) # +1 because the table header counts as a row
                        @needs_document_approval_from_.each do |s|
                            expect(page).to have_text s.public_number
                        end
                    end
                    it "must show the reset button" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_approval_from_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(page).to have_css "button[data-test-id='reset_settlement_search_button']"
                    end
                    context "and the reset button is clicked" do
                        it "must show all the owners settlements again" do
                            sign_in @visitor
                            visit user_profile_show_path(@owner.profile, section: 'settlements')
                            find("[data-test-id='needs_document_approval_from_message']").click
                            sleep 0.1 # To allow time for the active settlement table to update
                            click_on 'Reset'
                            sleep 0.1 # To allow time for the active settlement table to update
                            expect(all('tr').count).to eq(@owner.settlements.count + 1) # +1 because the table header counts as a row
                            @owner.settlements.each_with_index do |s, i|
                                expect(page).to have_text s.public_number
                            end
                        end
                    end
                end
            end
        end
        context "with 0 settlements needing attr approval" do
            before :context do
                @needs_attr_approval_from_ = create_list(:settlement, 0, :needs_attr_approval_from_attorney, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @needs_attr_approval_from_
            end
            after :context do
                @needs_attr_approval_from_.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must not have the needs attr approval from  message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='needs_attr_approval_from_message']"
                    expect(page).to_not have_text '0 settlements need your approval'
                end
            end
        end
        context "with 1 settlement needing attr approval" do
            before :context do
                @needs_attr_approval_from_ = create_list(:settlement, 1, :needs_attr_approval_from_attorney, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @needs_attr_approval_from_
            end
            after :context do
                @needs_attr_approval_from_.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the needs attr approval from  message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='needs_attr_approval_from_message']"
                    expect(page).to have_text 'A settlement needs your approval'
                end
                context "after the needs attr approval from  message is clicked" do
                    it "must hide all other whats next messages" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_attr_approval_from_message']").click
                        sleep 0.1 # To allow time for the whats next card to update
                        expect(page).to_not have_css "[data-test-id='whats_next_wait_list']"
                        expect(find("[data-test-id='whats_next_action_list']").all('form').count).to eq(1) # +1 because the table header counts as a row
                        expect(find("[data-test-id='whats_next_action_list']")).to have_text 'A settlement needs your approval'
                    end
                    it "must show only the settlements needing attr approval in the active settlements card" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_attr_approval_from_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(all('tr').count).to eq(@needs_attr_approval_from_.size + 1) # +1 because the table header counts as a row
                        @needs_attr_approval_from_.each do |s|
                            expect(page).to have_text s.public_number
                        end
                    end
                    it "must show the reset button" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_attr_approval_from_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(page).to have_css "button[data-test-id='reset_settlement_search_button']"
                    end
                    context "and the reset button is clicked" do
                        it "must show all the owners settlements again" do
                            sign_in @visitor
                            visit user_profile_show_path(@owner.profile, section: 'settlements')
                            find("[data-test-id='needs_attr_approval_from_message']").click
                            sleep 0.1 # To allow time for the active settlement table to update
                            click_on 'Reset'
                            sleep 0.1 # To allow time for the active settlement table to update
                            expect(all('tr').count).to eq(@owner.settlements.count + 1) # +1 because the table header counts as a row
                            @owner.settlements.each_with_index do |s, i|
                                expect(page).to have_text s.public_number
                            end
                        end
                    end
                end
            end
        end
        context "with 2 settlements needing attr approval" do
            before :context do
                @needs_attr_approval_from_ = create_list(:settlement, 2, :needs_attr_approval_from_attorney, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @needs_attr_approval_from_
            end
            after :context do
                @needs_attr_approval_from_.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the needs attr approval from  message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='needs_attr_approval_from_message']"
                    expect(page).to have_text '2 settlements need your approval'
                end
                context "after the needs attr approval from  message is clicked" do
                    it "must hide all other whats next messages" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_attr_approval_from_message']").click
                        sleep 0.1 # To allow time for the whats next card to update
                        expect(page).to_not have_css "[data-test-id='whats_next_wait_list']"
                        expect(find("[data-test-id='whats_next_action_list']").all('form').count).to eq(1) # +1 because the table header counts as a row
                        expect(find("[data-test-id='whats_next_action_list']")).to have_text '2 settlements need your approval'
                    end
                    it "must show only the settlements needing attr approval in the active settlements card" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_attr_approval_from_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(all('tr').count).to eq(@needs_attr_approval_from_.size + 1) # +1 because the table header counts as a row
                        @needs_attr_approval_from_.each do |s|
                            expect(page).to have_text s.public_number
                        end
                    end
                    it "must show the reset button" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_attr_approval_from_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(page).to have_css "button[data-test-id='reset_settlement_search_button']"
                    end
                    context "and the reset button is clicked" do
                        it "must show all the owners settlements again" do
                            sign_in @visitor
                            visit user_profile_show_path(@owner.profile, section: 'settlements')
                            find("[data-test-id='needs_attr_approval_from_message']").click
                            sleep 0.1 # To allow time for the active settlement table to update
                            click_on 'Reset'
                            sleep 0.1 # To allow time for the active settlement table to update
                            expect(all('tr').count).to eq(@owner.settlements.count + 1) # +1 because the table header counts as a row
                            @owner.settlements.each_with_index do |s, i|
                                expect(page).to have_text s.public_number
                            end
                        end
                    end
                end
            end
        end
        context "with 0 settlements needing at least one signature" do
            before :context do
                @needs_signature = create_list(:settlement, 0, :needs_signature, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @needs_signature
            end
            after :context do
                @needs_signature.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must not have the needs signature message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='needs_signature_message']"
                    expect(page).to_not have_text '0 documents need a signature'
                end
            end
        end
        context "with 1 settlement needing at least one signature" do
            before :context do
                @needs_signature = create_list(:settlement, 1, :needs_signature, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @needs_signature
            end
            after :context do
                @needs_signature.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the needs signature message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='needs_signature_message']"
                    expect(page).to have_text 'A document needs a signature'
                end
                context "after the needs signature message is clicked" do
                    it "must hide all other whats next messages" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_signature_message']").click
                        sleep 0.1 # To allow time for the whats next card to update
                        expect(page).to_not have_css "[data-test-id='whats_next_wait_list']"
                        expect(find("[data-test-id='whats_next_action_list']").all('form').count).to eq(1) # +1 because the table header counts as a row
                        expect(find("[data-test-id='whats_next_action_list']")).to have_text 'A document needs a signature'
                    end
                    it "must show only the settlements needing at least one signature in the active settlements card" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_signature_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(all('tr').count).to eq(@needs_signature.size + 1) # +1 because the table header counts as a row
                        @needs_signature.each do |s|
                            expect(page).to have_text s.public_number
                        end
                    end
                    it "must show the reset button" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_signature_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(page).to have_css "button[data-test-id='reset_settlement_search_button']"
                    end
                    context "and the reset button is clicked" do
                        it "must show all the owners settlements again" do
                            sign_in @visitor
                            visit user_profile_show_path(@owner.profile, section: 'settlements')
                            find("[data-test-id='needs_signature_message']").click
                            sleep 0.1 # To allow time for the active settlement table to update
                            click_on 'Reset'
                            sleep 0.1 # To allow time for the active settlement table to update
                            expect(all('tr').count).to eq(@owner.settlements.count + 1) # +1 because the table header counts as a row
                            @owner.settlements.each_with_index do |s, i|
                                expect(page).to have_text s.public_number
                            end
                        end
                    end
                end
            end
        end
        context "with 2 settlements needing at least one signature" do
            before :context do
                @needs_signature = create_list(:settlement, 2, :needs_signature, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @needs_signature
            end
            after :context do
                @needs_signature.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the needs signature message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='needs_signature_message']"
                    expect(page).to have_text '2 documents need a signature'
                end
                context "after the needs signature message is clicked" do
                    it "must hide all other whats next messages" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_signature_message']").click
                        sleep 0.1 # To allow time for the whats next card to update
                        expect(page).to_not have_css "[data-test-id='whats_next_wait_list']"
                        expect(find("[data-test-id='whats_next_action_list']").all('form').count).to eq(1) # +1 because the table header counts as a row
                        expect(find("[data-test-id='whats_next_action_list']")).to have_text '2 documents need a signature'
                    end
                    it "must show only the settlements needing at least one signature in the active settlements card" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_signature_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(all('tr').count).to eq(@needs_signature.size + 1) # +1 because the table header counts as a row
                        @needs_signature.each do |s|
                            expect(page).to have_text s.public_number
                        end
                    end
                    it "must show the reset button" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_signature_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(page).to have_css "button[data-test-id='reset_settlement_search_button']"
                    end
                    context "and the reset button is clicked" do
                        it "must show all the owners settlements again" do
                            sign_in @visitor
                            visit user_profile_show_path(@owner.profile, section: 'settlements')
                            find("[data-test-id='needs_signature_message']").click
                            sleep 0.1 # To allow time for the active settlement table to update
                            click_on 'Reset'
                            sleep 0.1 # To allow time for the active settlement table to update
                            expect(all('tr').count).to eq(@owner.settlements.count + 1) # +1 because the table header counts as a row
                            @owner.settlements.each_with_index do |s, i|
                                expect(page).to have_text s.public_number
                            end
                        end
                    end
                end
            end
        end
        context "with 0 settlements ready for payment" do
            before :context do
                @ready_for_payment = create_list(:settlement, 0, :ready_for_payment, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @ready_for_payment
            end
            after :context do
                @ready_for_payment.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must not have the ready for payment message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='ready_for_payment_message']"
                    expect(page).to_not have_text '0 settlements are ready for payment'
                end
            end
        end
        context "with 1 settlement ready for payment" do
            before :context do
                @ready_for_payment = create_list(:settlement, 1, :ready_for_payment, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @ready_for_payment
            end
            after :context do
                @ready_for_payment.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must not have the ready for payment message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='ready_for_payment_message']"
                    expect(page).to_not have_text 'A settlement is ready for payment'
                end
            end
        end
        context "with 2 settlements ready for payment" do
            before :context do
                @ready_for_payment = create_list(:settlement, 2, :ready_for_payment, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @ready_for_payment
            end
            after :context do
                @ready_for_payment.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must not have the ready for payment message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='ready_for_payment_message']"
                    expect(page).to_not have_text '2 settlements are ready for payment'
                end
            end
        end
        context "with 0 settlements awaiting document approval" do
            before :context do
                @document_approval = create_list(:settlement, 0, :needs_document_approval_from_adjuster, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @document_approval
            end
            after :context do
                @document_approval.each {|s| s.destroy}
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must not have the waiting for document approval message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='awaiting_document_approval_message']"
                    expect(page).to_not have_text '0 documents to be approved'
                end
            end
        end
        context "with 1 settlement awaiting document approval" do
            before :context do
                @document_approval = create_list(:settlement, 1, :needs_document_approval_from_adjuster, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @document_approval
            end
            after :context do
                @document_approval.each {|s| s.destroy}
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the waiting for document approval message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='awaiting_document_approval_message']"
                    expect(page).to have_text '1 document to be approved'
                end
            end
        end
        context "with 2 settlements awaiting document approval" do
            before :context do
                @document_approval = create_list(:settlement, 2, :needs_document_approval_from_adjuster, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @document_approval
            end
            after :context do
                @document_approval.each {|s| s.destroy}
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the waiting for document approval message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='awaiting_document_approval_message']"
                    expect(page).to have_text '2 documents to be approved'
                end
            end
        end
        context "with 0 settlements awaiting attr approval" do
            before :context do
                @attr_approval = create_list(:settlement, 0, :needs_attr_approval_from_adjuster, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @attr_approval
            end
            after :context do
                @attr_approval.each {|s| s.destroy}
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must not have the waiting for attr approval message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='awaiting_attr_approval_message']"
                    expect(page).to_not have_text '0 settlements to be approved'
                end
            end
        end
        context "with 1 settlement awaiting attr approval" do
            before :context do
                @attr_approval = create_list(:settlement, 1, :needs_attr_approval_from_adjuster, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @attr_approval
            end
            after :context do
                @attr_approval.each {|s| s.destroy}
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the waiting for attr approval message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='awaiting_attr_approval_message']"
                    expect(page).to have_text '1 settlement to be approved'
                end
            end
        end
        context "with 2 settlements awaiting attr approval" do
            before :context do
                @attr_approval = create_list(:settlement, 2, :needs_attr_approval_from_adjuster, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @attr_approval
            end
            after :context do
                @attr_approval.each {|s| s.destroy}
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the waiting for attr approval message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='awaiting_attr_approval_message']"
                    expect(page).to have_text '2 settlements to be approved'
                end
            end
        end
        context "with 0 settlements awaiting payment sending" do
            before :context do
                @payment_sending = create_list(:settlement, 0, :ready_for_payment, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @payment_sending
            end
            after :context do
                @payment_sending.each {|s| s.destroy}
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must not have the waiting for payment sending message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='awaiting_payment_sending_message']"
                    expect(page).to_not have_text '0 payments to be sent'
                end
            end
        end
        context "with 1 settlement awaiting payment sending" do
            before :context do
                @payment_sending = create_list(:settlement, 1, :ready_for_payment, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @payment_sending
            end
            after :context do
                @payment_sending.each {|s| s.destroy}
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the waiting for payment sending message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='awaiting_payment_sending_message']"
                    expect(page).to have_text '1 payment to be sent'
                end
            end
        end
        context "with 2 settlements awaiting payment sending" do
            before :context do
                @payment_sending = create_list(:settlement, 2, :ready_for_payment, attorney: @owner, adjuster: User.adjusters.sample)
                @owner.settlements = @payment_sending
            end
            after :context do
                @payment_sending.each {|s| s.destroy}
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the waiting for payment sending message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='awaiting_payment_sending_message']"
                    expect(page).to have_text '2 payments to be sent'
                end
            end
        end
        context "and the visitor is not the owner" do
            it "must not be shown" do
                @non_owner_users.each do |u|
                    sign_in u
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='whats_next_card']"
                    expect(page).to_not have_css "[data-test-id='whats_next_wait_list']"
                    expect(page).to_not have_css "[data-test-id='ready_for_payment_message']"
                    expect(page).to_not have_css "[data-test-id='needs_signature_message']"
                    expect(page).to_not have_css "[data-test-id='needs_signature_message']"
                    expect(page).to_not have_css "[data-test-id='needs_attr_approval_from_message']"
                    expect(page).to_not have_css "[data-test-id='needs_document_approval_from_message']"
                    expect(page).to_not have_css "[data-test-id='needs_document_message']"
                end
            end
        end
    end
    context "when the owner is an adjuster" do
        before :context do
            @owner = create(:insurance_company, num_members: 2).members.first
            another_law_firm = create(:law_firm)
            another_insurance_company = create(:insurance_company)
            another_adjuster = another_insurance_company.members.first
            another_attorney = another_law_firm.members.first
            organization = @owner.organization
            member_of_organization = organization.members.last
            @non_owner_users = [organization, member_of_organization, another_attorney, another_adjuster, another_law_firm, another_insurance_company]
        end
        after :context do
            User.all.each {|u| u.destroy}
        end
        context "with 0 settlements needing a document" do
            before :context do
                @needs_document = create_list(:settlement, 0, :needs_document, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @needs_document
            end
            after :context do
                @needs_document.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must not have the needs document message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='needs_document_message']"
                    expect(page).to_not have_text '0 settlements need a document'
                end
            end
        end
        context "with 1 settlement needing a document" do
            before :context do
                @needs_document = create_list(:settlement, 1, :needs_document, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @needs_document
            end
            after :context do
                @needs_document.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the needs document message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='needs_document_message']"
                    expect(page).to have_text 'A settlement needs a document'
                end
                context "after the needs document message is clicked" do
                    it "must hide all other whats next messages" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_message']").click
                        sleep 0.1 # To allow time for the whats next card to update
                        expect(page).to_not have_css "[data-test-id='whats_next_wait_list']"
                        expect(find("[data-test-id='whats_next_action_list']").all('form').count).to eq(1) # +1 because the table header counts as a row
                        expect(find("[data-test-id='whats_next_action_list']")).to have_text 'A settlement needs a document'
                    end
                    it "must show only the settlements needing a document in the active settlements card" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(all('tr').count).to eq(@needs_document.size + 1) # +1 because the table header counts as a row
                        @needs_document.each do |s|
                            expect(page).to have_text s.public_number
                        end
                    end
                    it "must show the reset button" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(page).to have_css "button[data-test-id='reset_settlement_search_button']"
                    end
                    context "and the reset button is clicked" do
                        it "must show all the owners settlements again" do
                            sign_in @visitor
                            visit user_profile_show_path(@owner.profile, section: 'settlements')
                            find("[data-test-id='needs_document_message']").click
                            sleep 0.1 # To allow time for the active settlement table to update
                            click_on 'Reset'
                            sleep 0.1 # To allow time for the active settlement table to update
                            expect(all('tr').count).to eq(@owner.settlements.count + 1) # +1 because the table header counts as a row
                            @owner.settlements.each_with_index do |s, i|
                                expect(page).to have_text s.public_number
                            end
                        end
                    end
                end
            end
        end
        context "with 2 settlements needing a document" do
            before :context do
                @needs_document = create_list(:settlement, 2, :needs_document, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @needs_document
            end
            after :context do
                @needs_document.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the needs document message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='needs_document_message']"
                    expect(page).to have_text '2 settlements need a document'
                end
                context "after the needs document message is clicked" do
                    it "must hide all other whats next messages" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_message']").click
                        sleep 0.1 # To allow time for the whats next card to update
                        expect(page).to_not have_css "[data-test-id='whats_next_wait_list']"
                        expect(find("[data-test-id='whats_next_action_list']").all('form').count).to eq(1) # +1 because the table header counts as a row
                        expect(find("[data-test-id='whats_next_action_list']")).to have_text '2 settlements need a document'
                    end
                    it "must show only the settlements needing a document in the active settlements card" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(all('tr').count).to eq(@needs_document.size + 1) # +1 because the table header counts as a row
                        @needs_document.each do |s|
                            expect(page).to have_text s.public_number
                        end
                    end
                    it "must show the reset button" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(page).to have_css "button[data-test-id='reset_settlement_search_button']"
                    end
                    context "and the reset button is clicked" do
                        it "must show all the owners settlements again" do
                            sign_in @visitor
                            visit user_profile_show_path(@owner.profile, section: 'settlements')
                            find("[data-test-id='needs_document_message']").click
                            sleep 0.1 # To allow time for the active settlement table to update
                            click_on 'Reset'
                            sleep 0.1 # To allow time for the active settlement table to update
                            expect(all('tr').count).to eq(@owner.settlements.count + 1) # +1 because the table header counts as a row
                            @owner.settlements.each_with_index do |s, i|
                                expect(page).to have_text s.public_number
                            end
                        end
                    end
                end
            end
        end
        context "with 0 settlements needing document approval" do
            before :context do
                @needs_document_approval_from_ = create_list(:settlement, 0, :needs_document_approval_from_adjuster, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @needs_document_approval_from_
            end
            after :context do
                @needs_document_approval_from_.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must not have the needs document approval from  message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='needs_document_approval_from_message']"
                    expect(page).to_not have_text '0 documents need your approval'
                end
            end
        end
        context "with 1 settlement needing document approval" do
            before :context do
                @needs_document_approval_from_ = create_list(:settlement, 1, :needs_document_approval_from_adjuster, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @needs_document_approval_from_
            end
            after :context do
                @needs_document_approval_from_.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the needs document approval from  message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='needs_document_approval_from_message']"
                    expect(page).to have_text 'A document needs your approval'
                end
                context "after the needs document approval from  message is clicked" do
                    it "must hide all other whats next messages" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_approval_from_message']").click
                        sleep 0.1 # To allow time for the whats next card to update
                        expect(page).to_not have_css "[data-test-id='whats_next_wait_list']"
                        expect(find("[data-test-id='whats_next_action_list']").all('form').count).to eq(1) # +1 because the table header counts as a row
                        expect(find("[data-test-id='whats_next_action_list']")).to have_text 'A document needs your approval'
                    end
                    it "must show only the settlements needing document approval in the active settlements card" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_approval_from_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(all('tr').count).to eq(@needs_document_approval_from_.size + 1) # +1 because the table header counts as a row
                        @needs_document_approval_from_.each do |s|
                            expect(page).to have_text s.public_number
                        end
                    end
                    it "must show the reset button" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_approval_from_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(page).to have_css "button[data-test-id='reset_settlement_search_button']"
                    end
                    context "and the reset button is clicked" do
                        it "must show all the owners settlements again" do
                            sign_in @visitor
                            visit user_profile_show_path(@owner.profile, section: 'settlements')
                            find("[data-test-id='needs_document_approval_from_message']").click
                            sleep 0.1 # To allow time for the active settlement table to update
                            click_on 'Reset'
                            sleep 0.1 # To allow time for the active settlement table to update
                            expect(all('tr').count).to eq(@owner.settlements.count + 1) # +1 because the table header counts as a row
                            @owner.settlements.each_with_index do |s, i|
                                expect(page).to have_text s.public_number
                            end
                        end
                    end
                end
            end
        end
        context "with 2 settlements needing document approval" do
            before :context do
                @needs_document_approval_from_ = create_list(:settlement, 2, :needs_document_approval_from_adjuster, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @needs_document_approval_from_
            end
            after :context do
                @needs_document_approval_from_.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the needs document approval from  message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='needs_document_approval_from_message']"
                    expect(page).to have_text '2 documents need your approval'
                end
                context "after the needs document approval from  message is clicked" do
                    it "must hide all other whats next messages" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_approval_from_message']").click
                        sleep 0.1 # To allow time for the whats next card to update
                        expect(page).to_not have_css "[data-test-id='whats_next_wait_list']"
                        expect(find("[data-test-id='whats_next_action_list']").all('form').count).to eq(1) # +1 because the table header counts as a row
                        expect(find("[data-test-id='whats_next_action_list']")).to have_text '2 documents need your approval'
                    end
                    it "must show only the settlements needing document approval in the active settlements card" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_approval_from_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(all('tr').count).to eq(@needs_document_approval_from_.size + 1) # +1 because the table header counts as a row
                        @needs_document_approval_from_.each do |s|
                            expect(page).to have_text s.public_number
                        end
                    end
                    it "must show the reset button" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_document_approval_from_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(page).to have_css "button[data-test-id='reset_settlement_search_button']"
                    end
                    context "and the reset button is clicked" do
                        it "must show all the owners settlements again" do
                            sign_in @visitor
                            visit user_profile_show_path(@owner.profile, section: 'settlements')
                            find("[data-test-id='needs_document_approval_from_message']").click
                            sleep 0.1 # To allow time for the active settlement table to update
                            click_on 'Reset'
                            sleep 0.1 # To allow time for the active settlement table to update
                            expect(all('tr').count).to eq(@owner.settlements.count + 1) # +1 because the table header counts as a row
                            @owner.settlements.each_with_index do |s, i|
                                expect(page).to have_text s.public_number
                            end
                        end
                    end
                end
            end
        end
        context "with 0 settlements needing attr approval" do
            before :context do
                @needs_attr_approval_from_ = create_list(:settlement, 0, :needs_attr_approval_from_adjuster, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @needs_attr_approval_from_
            end
            after :context do
                @needs_attr_approval_from_.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must not have the needs attr approval from  message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='needs_attr_approval_from_message']"
                    expect(page).to_not have_text '0 settlements need your approval'
                end
            end
        end
        context "with 1 settlement needing attr approval" do
            before :context do
                @needs_attr_approval_from_ = create_list(:settlement, 1, :needs_attr_approval_from_adjuster, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @needs_attr_approval_from_
            end
            after :context do
                @needs_attr_approval_from_.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the needs attr approval from  message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='needs_attr_approval_from_message']"
                    expect(page).to have_text 'A settlement needs your approval'
                end
                context "after the needs attr approval from  message is clicked" do
                    it "must hide all other whats next messages" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_attr_approval_from_message']").click
                        sleep 0.1 # To allow time for the whats next card to update
                        expect(page).to_not have_css "[data-test-id='whats_next_wait_list']"
                        expect(find("[data-test-id='whats_next_action_list']").all('form').count).to eq(1) # +1 because the table header counts as a row
                        expect(find("[data-test-id='whats_next_action_list']")).to have_text 'A settlement needs your approval'
                    end
                    it "must show only the settlements needing attr approval in the active settlements card" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_attr_approval_from_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(all('tr').count).to eq(@needs_attr_approval_from_.size + 1) # +1 because the table header counts as a row
                        @needs_attr_approval_from_.each do |s|
                            expect(page).to have_text s.public_number
                        end
                    end
                    it "must show the reset button" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_attr_approval_from_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(page).to have_css "button[data-test-id='reset_settlement_search_button']"
                    end
                    context "and the reset button is clicked" do
                        it "must show all the owners settlements again" do
                            sign_in @visitor
                            visit user_profile_show_path(@owner.profile, section: 'settlements')
                            find("[data-test-id='needs_attr_approval_from_message']").click
                            sleep 0.1 # To allow time for the active settlement table to update
                            click_on 'Reset'
                            sleep 0.1 # To allow time for the active settlement table to update
                            expect(all('tr').count).to eq(@owner.settlements.count + 1) # +1 because the table header counts as a row
                            @owner.settlements.each_with_index do |s, i|
                                expect(page).to have_text s.public_number
                            end
                        end
                    end
                end
            end
        end
        context "with 2 settlements needing attr approval" do
            before :context do
                @needs_attr_approval_from_ = create_list(:settlement, 2, :needs_attr_approval_from_adjuster, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @needs_attr_approval_from_
            end
            after :context do
                @needs_attr_approval_from_.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the needs attr approval from  message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='needs_attr_approval_from_message']"
                    expect(page).to have_text '2 settlements need your approval'
                end
                context "after the needs attr approval from  message is clicked" do
                    it "must hide all other whats next messages" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_attr_approval_from_message']").click
                        sleep 0.1 # To allow time for the whats next card to update
                        expect(page).to_not have_css "[data-test-id='whats_next_wait_list']"
                        expect(find("[data-test-id='whats_next_action_list']").all('form').count).to eq(1) # +1 because the table header counts as a row
                        expect(find("[data-test-id='whats_next_action_list']")).to have_text '2 settlements need your approval'
                    end
                    it "must show only the settlements needing attr approval in the active settlements card" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_attr_approval_from_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(all('tr').count).to eq(@needs_attr_approval_from_.size + 1) # +1 because the table header counts as a row
                        @needs_attr_approval_from_.each do |s|
                            expect(page).to have_text s.public_number
                        end
                    end
                    it "must show the reset button" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_attr_approval_from_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(page).to have_css "button[data-test-id='reset_settlement_search_button']"
                    end
                    context "and the reset button is clicked" do
                        it "must show all the owners settlements again" do
                            sign_in @visitor
                            visit user_profile_show_path(@owner.profile, section: 'settlements')
                            find("[data-test-id='needs_attr_approval_from_message']").click
                            sleep 0.1 # To allow time for the active settlement table to update
                            click_on 'Reset'
                            sleep 0.1 # To allow time for the active settlement table to update
                            expect(all('tr').count).to eq(@owner.settlements.count + 1) # +1 because the table header counts as a row
                            @owner.settlements.each_with_index do |s, i|
                                expect(page).to have_text s.public_number
                            end
                        end
                    end
                end
            end
        end
        context "with 0 settlements needing at least one signature" do
            before :context do
                @needs_signature = create_list(:settlement, 0, :needs_signature, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @needs_signature
            end
            after :context do
                @needs_signature.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must not have the needs signature message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='needs_signature_message']"
                    expect(page).to_not have_text '0 documents need a signature'
                end
            end
        end
        context "with 1 settlement needing at least one signature" do
            before :context do
                @needs_signature = create_list(:settlement, 1, :needs_signature, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @needs_signature
            end
            after :context do
                @needs_signature.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the needs signature message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='needs_signature_message']"
                    expect(page).to have_text 'A document needs a signature'
                end
                context "after the needs signature message is clicked" do
                    it "must hide all other whats next messages" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_signature_message']").click
                        sleep 0.1 # To allow time for the whats next card to update
                        expect(page).to_not have_css "[data-test-id='whats_next_wait_list']"
                        expect(find("[data-test-id='whats_next_action_list']").all('form').count).to eq(1) # +1 because the table header counts as a row
                        expect(find("[data-test-id='whats_next_action_list']")).to have_text 'A document needs a signature'
                    end
                    it "must show only the settlements needing at least one signature in the active settlements card" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_signature_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(all('tr').count).to eq(@needs_signature.size + 1) # +1 because the table header counts as a row
                        @needs_signature.each do |s|
                            expect(page).to have_text s.public_number
                        end
                    end
                    it "must show the reset button" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_signature_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(page).to have_css "button[data-test-id='reset_settlement_search_button']"
                    end
                    context "and the reset button is clicked" do
                        it "must show all the owners settlements again" do
                            sign_in @visitor
                            visit user_profile_show_path(@owner.profile, section: 'settlements')
                            find("[data-test-id='needs_signature_message']").click
                            sleep 0.1 # To allow time for the active settlement table to update
                            click_on 'Reset'
                            sleep 0.1 # To allow time for the active settlement table to update
                            expect(all('tr').count).to eq(@owner.settlements.count + 1) # +1 because the table header counts as a row
                            @owner.settlements.each_with_index do |s, i|
                                expect(page).to have_text s.public_number
                            end
                        end
                    end
                end
            end
        end
        context "with 2 settlements needing at least one signature" do
            before :context do
                @needs_signature = create_list(:settlement, 2, :needs_signature, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @needs_signature
            end
            after :context do
                @needs_signature.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the needs signature message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='needs_signature_message']"
                    expect(page).to have_text '2 documents need a signature'
                end
                context "after the needs signature message is clicked" do
                    it "must hide all other whats next messages" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_signature_message']").click
                        sleep 0.1 # To allow time for the whats next card to update
                        expect(page).to_not have_css "[data-test-id='whats_next_wait_list']"
                        expect(find("[data-test-id='whats_next_action_list']").all('form').count).to eq(1) # +1 because the table header counts as a row
                        expect(find("[data-test-id='whats_next_action_list']")).to have_text '2 documents need a signature'
                    end
                    it "must show only the settlements needing at least one signature in the active settlements card" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_signature_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(all('tr').count).to eq(@needs_signature.size + 1) # +1 because the table header counts as a row
                        @needs_signature.each do |s|
                            expect(page).to have_text s.public_number
                        end
                    end
                    it "must show the reset button" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='needs_signature_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(page).to have_css "button[data-test-id='reset_settlement_search_button']"
                    end
                    context "and the reset button is clicked" do
                        it "must show all the owners settlements again" do
                            sign_in @visitor
                            visit user_profile_show_path(@owner.profile, section: 'settlements')
                            find("[data-test-id='needs_signature_message']").click
                            sleep 0.1 # To allow time for the active settlement table to update
                            click_on 'Reset'
                            sleep 0.1 # To allow time for the active settlement table to update
                            expect(all('tr').count).to eq(@owner.settlements.count + 1) # +1 because the table header counts as a row
                            @owner.settlements.each_with_index do |s, i|
                                expect(page).to have_text s.public_number
                            end
                        end
                    end
                end
            end
        end
        context "with 0 settlements ready for payment" do
            before :context do
                @ready_for_payment = create_list(:settlement, 0, :ready_for_payment, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @ready_for_payment
            end
            after :context do
                @ready_for_payment.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must not have the ready for payment message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='ready_for_payment_message']"
                    expect(page).to_not have_text '0 settlements are ready for payment'
                end
            end
        end
        context "with 1 settlement ready for payment" do
            before :context do
                @ready_for_payment = create_list(:settlement, 1, :ready_for_payment, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @ready_for_payment
            end
            after :context do
                @ready_for_payment.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the ready for payment message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='ready_for_payment_message']"
                    expect(page).to have_text 'A settlement is ready for payment'
                end
                context "after the ready for payment message is clicked" do
                    it "must hide all other whats next messages" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='ready_for_payment_message']").click
                        sleep 0.1 # To allow time for the whats next card to update
                        expect(page).to_not have_css "[data-test-id='whats_next_wait_list']"
                        expect(find("[data-test-id='whats_next_action_list']").all('form').count).to eq(1) # +1 because the table header counts as a row
                        expect(find("[data-test-id='whats_next_action_list']")).to have_text 'A settlement is ready for payment'
                    end
                    it "must show only the settlements ready for payment in the active settlements card" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='ready_for_payment_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(all('tr').count).to eq(@ready_for_payment.size + 1) # +1 because the table header counts as a row
                        @ready_for_payment.each do |s|
                            expect(page).to have_text s.public_number
                        end
                    end
                    it "must show the reset button" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='ready_for_payment_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(page).to have_css "button[data-test-id='reset_settlement_search_button']"
                    end
                    context "and the reset button is clicked" do
                        it "must show all the owners settlements again" do
                            sign_in @visitor
                            visit user_profile_show_path(@owner.profile, section: 'settlements')
                            find("[data-test-id='ready_for_payment_message']").click
                            sleep 0.1 # To allow time for the active settlement table to update
                            click_on 'Reset'
                            sleep 0.1 # To allow time for the active settlement table to update
                            expect(all('tr').count).to eq(@owner.settlements.count + 1) # +1 because the table header counts as a row
                            @owner.settlements.each_with_index do |s, i|
                                expect(page).to have_text s.public_number
                            end
                        end
                    end
                end
            end
        end
        context "with 2 settlements ready for payment" do
            before :context do
                @ready_for_payment = create_list(:settlement, 2, :ready_for_payment, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @ready_for_payment
            end
            after :context do
                @ready_for_payment.each {|s| s.destroy!}
                @owner.reload
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the ready for payment message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='ready_for_payment_message']"
                    expect(page).to have_text '2 settlements are ready for payment'
                end
                context "after the ready for payment message is clicked" do
                    it "must hide all other whats next messages" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='ready_for_payment_message']").click
                        sleep 0.1 # To allow time for the whats next card to update
                        expect(page).to_not have_css "[data-test-id='whats_next_wait_list']"
                        expect(find("[data-test-id='whats_next_action_list']").all('form').count).to eq(1) # +1 because the table header counts as a row
                        expect(find("[data-test-id='whats_next_action_list']")).to have_text '2 settlements are ready for payment'
                    end
                    it "must show only the settlements ready for payment in the active settlements card" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='ready_for_payment_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(all('tr').count).to eq(@ready_for_payment.size + 1) # +1 because the table header counts as a row
                        @ready_for_payment.each do |s|
                            expect(page).to have_text s.public_number
                        end
                    end
                    it "must show the reset button" do
                        sign_in @visitor
                        visit user_profile_show_path(@owner.profile, section: 'settlements')
                        find("[data-test-id='ready_for_payment_message']").click
                        sleep 0.1 # To allow time for the active settlement table to update
                        expect(page).to have_css "button[data-test-id='reset_settlement_search_button']"
                    end
                    context "and the reset button is clicked" do
                        it "must show all the owners settlements again" do
                            sign_in @visitor
                            visit user_profile_show_path(@owner.profile, section: 'settlements')
                            find("[data-test-id='ready_for_payment_message']").click
                            sleep 0.1 # To allow time for the active settlement table to update
                            click_on 'Reset'
                            sleep 0.1 # To allow time for the active settlement table to update
                            expect(all('tr').count).to eq(@owner.settlements.count + 1) # +1 because the table header counts as a row
                            @owner.settlements.each_with_index do |s, i|
                                expect(page).to have_text s.public_number
                            end
                        end
                    end
                end
            end
        end
        context "with 0 settlements awaiting document approval" do
            before :context do
                @document_approval = create_list(:settlement, 0, :needs_document_approval_from_attorney, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @document_approval
            end
            after :context do
                @document_approval.each {|s| s.destroy}
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must not have the waiting for document approval message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='awaiting_document_approval_message']"
                    expect(page).to_not have_text '0 documents to be approved'
                end
            end
        end
        context "with 1 settlement awaiting document approval" do
            before :context do
                @document_approval = create_list(:settlement, 1, :needs_document_approval_from_attorney, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @document_approval
            end
            after :context do
                @document_approval.each {|s| s.destroy}
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the waiting for document approval message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='awaiting_document_approval_message']"
                    expect(page).to have_text '1 document to be approved'
                end
            end
        end
        context "with 2 settlements awaiting document approval" do
            before :context do
                @document_approval = create_list(:settlement, 2, :needs_document_approval_from_attorney, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @document_approval
            end
            after :context do
                @document_approval.each {|s| s.destroy}
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the waiting for document approval message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='awaiting_document_approval_message']"
                    expect(page).to have_text '2 documents to be approved'
                end
            end
        end
        context "with 0 settlements awaiting attr approval" do
            before :context do
                @attr_approval = create_list(:settlement, 0, :needs_attr_approval_from_attorney, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @attr_approval
            end
            after :context do
                @attr_approval.each {|s| s.destroy}
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must not have the waiting for attr approval message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='awaiting_attr_approval_message']"
                    expect(page).to_not have_text '0 settlements to be approved'
                end
            end
        end
        context "with 1 settlement awaiting attr approval" do
            before :context do
                @attr_approval = create_list(:settlement, 1, :needs_attr_approval_from_attorney, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @attr_approval
            end
            after :context do
                @attr_approval.each {|s| s.destroy}
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the waiting for attr approval message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='awaiting_attr_approval_message']"
                    expect(page).to have_text '1 settlement to be approved'
                end
            end
        end
        context "with 2 settlements awaiting attr approval" do
            before :context do
                @attr_approval = create_list(:settlement, 2, :needs_attr_approval_from_attorney, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @attr_approval
            end
            after :context do
                @attr_approval.each {|s| s.destroy}
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must have the waiting for attr approval message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to have_css "[data-test-id='awaiting_attr_approval_message']"
                    expect(page).to have_text '2 settlements to be approved'
                end
            end
        end
        context "with 0 settlements awaiting payment sending" do
            before :context do
                @payment_sending = create_list(:settlement, 0, :ready_for_payment, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @payment_sending
            end
            after :context do
                @payment_sending.each {|s| s.destroy}
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must not have the waiting for payment sending message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='awaiting_payment_sending_message']"
                    expect(page).to_not have_text '0 payments to be sent'
                end
            end
        end
        context "with 1 settlement awaiting payment sending" do
            before :context do
                @payment_sending = create_list(:settlement, 1, :ready_for_payment, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @payment_sending
            end
            after :context do
                @payment_sending.each {|s| s.destroy}
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must not have the waiting for payment sending message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='awaiting_payment_sending_message']"
                    expect(page).to_not have_text '1 payment to be sent'
                end
            end
        end
        context "with 2 settlements awaiting payment sending" do
            before :context do
                @payment_sending = create_list(:settlement, 2, :ready_for_payment, adjuster: @owner, attorney: User.attorneys.sample)
                @owner.settlements = @payment_sending
            end
            after :context do
                @payment_sending.each {|s| s.destroy}
            end
            context "and the visitor is the owner" do
                before :context do
                    @visitor = @owner
                end
                it "must not have the waiting for payment sending message" do
                    sign_in @visitor
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='awaiting_payment_sending_message']"
                    expect(page).to_not have_text '2 payments to be sent'
                end
            end
        end
        context "and the visitor is not the owner" do
            it "must not be shown" do
                @non_owner_users.each do |u|
                    sign_in u
                    visit user_profile_show_path(@owner.profile, section: :settlements)
                    expect(page).to_not have_css "[data-test-id='whats_next_card']"
                    expect(page).to_not have_css "[data-test-id='whats_next_wait_list']"
                    expect(page).to_not have_css "[data-test-id='ready_for_payment_message']"
                    expect(page).to_not have_css "[data-test-id='needs_signature_message']"
                    expect(page).to_not have_css "[data-test-id='needs_signature_message']"
                    expect(page).to_not have_css "[data-test-id='needs_attr_approval_from_message']"
                    expect(page).to_not have_css "[data-test-id='needs_document_approval_from_message']"
                    expect(page).to_not have_css "[data-test-id='needs_document_message']"
                end
            end
        end
    end
    context "when the owner is a law_firm" do
        before :context do
            @owner = create(:law_firm)
            another_law_firm = create(:law_firm)
            another_insurance_company = create(:insurance_company)
            another_adjuster = another_insurance_company.members.first
            another_attorney = another_law_firm.members.first
            member_of_organization = @owner.members.first
            @every_possible_visitor = [@owner, member_of_organization, another_attorney, another_adjuster, another_law_firm, another_insurance_company]
        end
        after :context do
            User.all.each {|u| u.destroy}
        end
        it "must never be shown" do
            @every_possible_visitor.each do |u|
                sign_in u
                visit user_profile_show_path(@owner.profile, section: :settlements)
                expect(page).to_not have_css "[data-test-id='whats_next_card']"
            end
        end
    end
    context "when the owner is an insurance_company" do
        before :context do
            @owner = create(:insurance_company)
            another_law_firm = create(:law_firm)
            another_insurance_company = create(:insurance_company)
            another_adjuster = another_insurance_company.members.first
            another_attorney = another_law_firm.members.first
            member_of_organization = @owner.members.first
            @every_possible_visitor = [@owner, member_of_organization, another_attorney, another_adjuster, another_law_firm, another_insurance_company]
        end
        after :context do
            User.all.each {|u| u.destroy}
        end
        it "must never be shown" do
            @every_possible_visitor.each do |u|
                sign_in u
                visit user_profile_show_path(@owner.profile, section: :settlements)
                expect(page).to_not have_css "[data-test-id='whats_next_card']"
            end
        end
    end
end
